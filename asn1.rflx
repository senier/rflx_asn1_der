package ASN1 is

   type Tag_Universal is
      (UT_BOOLEAN           => 16#01#,
       UT_INTEGER           => 16#02#,
       UT_BIT_STRING        => 16#03#,
       UT_OCTET_STRING      => 16#04#,
       UT_NULL              => 16#05#,
       UT_OBJECT_IDENTIFIER => 16#06#,
       UT_UTF8String        => 16#0C#,
       UT_SEQUENCE          => 16#10#,
       UT_SET               => 16#11#,
       UT_PrintableString   => 16#13#,
       UT_IA5String         => 16#16#,
       UT_UTCTime           => 16#17#,
       UT_GeneralizedTime   => 16#18#) with Size => 5;

   type Tag_Raw is mod 2 ** 5;

   type Tag_Class is
      (Cl_Universal        => 0,
       Cl_Application      => 1,
       Cl_Context_Specific => 2,
       Cl_Private          => 3) with Size => 2;

   type Tag is
      message
         Class : Tag_Class;
         Constructed : Boolean
            then Universal
               if Class = Cl_Universal
            then Raw
               if Class /= Cl_Universal;
         Raw : Tag_Raw
            then null;
         Universal : Tag_Universal
            then null
               if (Universal /= UT_SEQUENCE and Universal /= UT_SET) or Constructed = True;
      end message;

   type Length is range 0 .. 127 with Size => 8;
   type Unused is range 0 .. 7 with Size => 8;

   type Byte is mod 2 ** 8;
   type Byte_Array is sequence of Byte;

   type Value is mod 2 ** 7;
   type Integer_Chunk is
      message
         Flag : Boolean;
         Value : Value;
      end message;

   -- ISSUE: Componolit/RecordFlux#401
   -- type Integer_List is
   --    message
   --       Chunk : Integer_Chunk
   --          then Next
   --             with Size => Message'Length - 8
   --             if Chunk_Flag = True
   --          then null
   --             if Chunk_Flag = False;
   --       Next : Opaque;
   --    end message;
   -- for Integer_List use (Next => Integer_Chunk);

   type Digit is range 48 .. 57 with Size => 8;
   type Zulu is range 90 .. 90 with Size => 8;

   type Number is
      message
         H : Digit;
         L : Digit;
      end message;

   type Base_Time is
      message
         Year : Number;
         Month : Number
            then Day
               if 10 * (Month_H - 48) + (Month_L - 48) < 13
                  and 10 * (Month_H - 48) + (Month_L - 48) > 0;
         Day : Number
            then Hour
               --  FIXME: Actual days of month not considered
               if 10 * (Day_H - 48) + (Day_L - 48) < 32
                  and 10 * (Day_H - 48) + (Day_L - 48) > 0;
         Hour : Number
            then Minute
               if 10 * (Hour_H - 48) + (Hour_L - 48) < 24;
         Minute : Number
            then Second
               if 10 * (Minute_H - 48) + (Minute_L - 48) < 60;
         Second : Number
            then Zulu
               if 10 * (Second_H - 48) + (Second_L - 48) < 60;
         Zulu : Zulu;
      end message;

   type UNTAGGED_UTCTime is
      message
         Length : Length
            then U
               if Length = 13;
         U : Base_Time;
      end message;

   type UTCTime is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_UTCTime;
         T : UNTAGGED_UTCTime;
      end message;

   type UNTAGGED_GeneralizedTime is
      message
         Length : Length
            then G_Century
               if Length = 15;
         G_Century : Number;
         G : Base_Time;
      end message;

   type GeneralizedTime is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_GeneralizedTime;
         T : UNTAGGED_GeneralizedTime;
      end message;

   type Bool_Value is (B_FALSE => 0, B_TRUE => 16#FF#) with Size => 8;
   type UNTAGGED_BOOL is
      message
         Length : Length
            then Value
               if Length = 1;
         Value : Bool_Value;
      end message;

   type BOOL is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_BOOLEAN;
         T : UNTAGGED_BOOL;
      end message;

   type UNTAGGED_BIT_STRING is
      message
         Length : Length;
         Unused : Unused
            then Value
               with Size => 8 * (Length - 1)
               if Length > 1
            then null
               if Length = 1;
         Value : Byte_Array;
      end message;

   type BIT_STRING is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_BIT_STRING;
         T : UNTAGGED_BIT_STRING;
      end message;

   type UNTAGGED_OCTET_STRING is
      message
         Length : Length
            then Value
               with Size => 8 * Length;
         Value : Byte_Array;
      end message;

   type OCTET_STRING is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_OCTET_STRING;
         T : UNTAGGED_OCTET_STRING;
      end message;

   type UNTAGGED_OBJECT_IDENTIFIER is
      message
         Length : Length
            then Value
               -- Handled as Opaque for now
               -- ISSUE: Componolit/RecordFlux#401
               -- ISSUE: Componolit/RecordFlux#8
               with Size => 8 * Length;
         Value : Byte_Array;
      end message;

   type OBJECT_IDENTIFIER is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_OBJECT_IDENTIFIER;
         T : UNTAGGED_OBJECT_IDENTIFIER;
      end message;

   type UNTAGGED_NULL is
      message
         Length : Length
            then null
               if Length = 0;
      end message;

   type NUL is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_NULL;
         T : UNTAGGED_NULL;
      end message;

   type UNTAGGED_INTEGER is
      message
         Length : Length
            then Integer
               if Length = 1
            then Raw
               with Size => 8 * Length
               if Length > 1;
         Integer : Integer_Chunk
            then null;
         Raw : Opaque;
      end message;

   type INTEGER is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_INTEGER;
         T : UNTAGGED_INTEGER;
      end message;

   type UNTAGGED_PrintableString is
      message
         Length : Length
            then Value
               with Size => 8 * Length;
         Value : Opaque;
      end message;

   type PrintableString is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_PrintableString;
         T : UNTAGGED_PrintableString;
      end message;

   type UNTAGGED_UTF8String is
      message
         Length : Length
            then Value
               with Size => 8 * Length;
         Value : Opaque;
      end message;

   type UTF8String is
      message
         Tag : Tag
            then T
               if Tag_Class = ASN1::Cl_Universal and Tag_Universal = ASN1::UT_UTF8String;
         T : UNTAGGED_UTF8String;
      end message;

end ASN1;
