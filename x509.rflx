with ASN1;

package X509 is

   type AlgorithmIdentifier is
      message
         algorithm  : ASN1.OBJECT_IDENTIFIER;
         parameters : ASN1.NUL;
      end message;

   type Version_Value is (v1 => 0, v2 => 1, v3 => 2) with Size => 8;
   type Version is
      message
         Length : ASN1.Length
            then Value
               if Length = 1;
         Value : Version_Value;
      end message;

   type AttributeValue is
      message
         tag : ASN1.Tag
            then printableString
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_PrintableString
            then utf8String
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_UTF8String;
         printableString : ASN1.PrintableString
            then null;
         utf8String : ASN1.UTF8String;
      end message;

   type AttributeTypeAndValue is
      message
         typ : ASN1.OBJECT_IDENTIFIER;
         value : AttributeValue;
      end message;

   -- ISSUE: set with at least one element
   type RelativeDistinguishedNameValue is array of AttributeTypeAndValue;
   type RelativeDistinguishedName is
      message
         tag : ASN1.Tag
            then length
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_SET;
         length : ASN1.Length
            then value
               with Length => length;
         value : RelativeDistinguishedNameValue;
      end message;

   type RDNSequenceValue is array of RelativeDistinguishedName;
   type RDNSequence is
      message
         tag : ASN1.Tag
            then length
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_SEQUENCE;
         length : ASN1.Length
            then value
               with Length => length;
         value : RDNSequenceValue;
      end message;

   type Name is
      message
         rdnSequence : RDNSequence;
      end message;

   type CertificateSerialNumber is new ASN1.INTEGER;

   type Time is
      message
         tag : ASN1.Tag
            then utcTime
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_UTCTime
            then generalizedTime
               if tag_Class = ASN1.Cl_Universal and tag_Universal = ASN1.UT_GeneralizedTime;
         utcTime : ASN1.UNTAGGED_UTCTime
            then null;
         generalizedTime : ASN1.UNTAGGED_GeneralizedTime;
      end message;

   type Validity is
      message
         notBefore : Time;
         notAfter : Time;
      end message;

   type TBSCertificate is
      message
         version_tag : ASN1.Tag
            then version
               if version_tag_Class = ASN1.Cl_Context_Specific and version_tag_Raw = 0
            then serialNumber
               with First => version_tag_Class'First
               if version_tag_Class /= ASN1.Cl_Context_Specific or version_tag_Raw /= 0;
         version : Version;
         serialNumber : CertificateSerialNumber;
         signature : AlgorithmIdentifier;
         issuer : Name;
         --  validity : Validity;
      end message;

   type Certificate is
      message
         tbsCertificate     : TBSCertificate;
         signatureAlgorithm : AlgorithmIdentifier;
         signature          : ASN1.BIT_STRING;
      end message;

end X509;
